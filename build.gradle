plugins {
    alias(libs.plugins.spring.boot)
    // id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.cloud.tools.jib' version '3.3.2'
    id 'com.palantir.git-version' version '3.0.0'
    id 'java'
}


group = 'io.bootify'
// dockerfile: will not know which file to copy from build/libs because each will be named differently
//version = gitVersion()
version = "my-app-0.0.1-SNAPSHOT"


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
        vendor = JvmVendorSpec.AMAZON
    }
}


// Containerization with Google Jib
jib {
    from {
        image = 'eclipse-temurin:19-jre-jammy'
        // https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-specify-a-platform-in-the-manifest-list-or-oci-index-of-a-base-image
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            // keep only one enabled if you want to run jibDockerBuild as that does not support multiple platforms
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }

    to {
        // image = 'codexregistry.azurecr.io/best-schools'
        image = 'acherrydev/codexrepo'
        tags = [gitVersion()]
        version = project.version
    }

    container {
        jvmFlags = ['-Xms512m', '-Xdebug', '-Dspring.profiles.active=prod']
        mainClass = 'io.bootify.my_app.MyAppApplication'
        creationTime = 'USE_CURRENT_TIMESTAMP'
        ports = ['8080/tcp']
    }
}


bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
}


// Dependency declarations

repositories {
    mavenCentral()
}

dependencies {
    // https://docs.gradle.org/current/userguide/platforms.html#sub::toml-dependencies-format
    implementation platform(libs.spring.boot.dependencies)

    implementation(libs.spring.boot.web)
    implementation(libs.spring.boot.validation)
    implementation(libs.spring.boot.webflux)
    implementation(libs.spring.openapi)
    implementation(libs.spring.boot.webfluxui)


//    developmentOnly('org.springframework.boot:spring-boot-docker-compose')


    // region lombok
    annotationProcessor(libs.lombok)
    compileOnly(libs.lombok)
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)
    // endregion


    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'


    // region db
    // implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    runtimeOnly 'org.postgresql:postgresql'
    // runtimeOnly('com.microsoft.sqlserver:mssql-jdbc')
    // endregion

    developmentOnly('org.springframework.boot:spring-boot-devtools')

    // region testing
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    // testImplementation 'org.testcontainers:postgresql'

    // endregion
}

tasks.named('test') {
    useJUnitPlatform()
}
